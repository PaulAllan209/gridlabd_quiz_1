module powerflow {
        bool show_matrix_values;
        double primary_voltage_ratio;
        double nominal_frequency;
        bool require_voltage_control;
        double geographic_degree;
        complex fault_impedance;
        complex ground_impedance;
        double warning_underfrequency;
        double warning_overfrequency;
        double warning_undervoltage;
        double warning_overvoltage;
        double warning_voltageangle;
        double maximum_voltage_error;
        enumeration {NR=2, GS=1, FBS=0} solver_method;
        char256 NR_matrix_file;
        enumeration {ALL=3, PER_CALL=2, ONCE=1, NEVER=0} NR_matrix_output_interval;
        bool NR_matrix_output_references;
        bool NR_island_failure_handled; // Indicates if an island fails if it should be removed from service
        bool line_capacitance;
        bool line_limits;
        char256 lu_solver;
        int64 NR_iteration_limit;
        int64 NR_deltamode_iteration_limit;
        int32 NR_superLU_procs;
        double default_maximum_voltage_error;
        double default_maximum_power_error;
        bool NR_admit_change;
        bool enable_subsecond_models; // Enable deltamode capabilities within the powerflow module
        bool all_powerflow_delta; // Forces all powerflow objects that are capable to participate in deltamode
        double deltamode_timestep[ns]; // Desired minimum timestep for deltamode-related simulations
        double current_frequency[Hz]; // Current system-level frequency of the powerflow system
        bool master_frequency_update; // Tracking variable to see if an object has become the system frequency updater
        bool enable_frequency_dependence; // Flag to enable frequency-based variations in impedance values of lines and loads
        double default_resistance;
        bool enable_inrush; // Flag to enable in-rush calculations for lines and transformers in deltamode
        enumeration {BACKWARD_EULER=3, TRAPEZOIDAL=2, NONE=0} inrush_integration; // Determine the integration method utilized in in-rush calculations
        enumeration {PLL=2, SIMPLE=1, NONE=0} all_frequency_measure_default;
        double low_voltage_impedance_level; // Lower limit of voltage (in per-unit) at which all load types are converted to impedance for in-rush calculations
        bool enable_mesh_fault_current; // Flag to enable mesh-based fault current calculations
        char1024 market_price_name; // Market current price published variable name
}
class load {
        parent node;
        class node {
                parent powerflow_object;
                class powerflow_object {
                        set {A=1, B=2, C=4, D=256, N=8, S=112, G=128} phases;
                        double nominal_voltage[V];
                        enumeration {BACKWARD_EULER=3, TRAPEZOIDAL=2, NONE=0} inrush_integration_method; // Integration method for in-rush
                }

                function interupdate_pwr_object();
                function pwr_object_swing_swapper();
                function pwr_current_injection_update_map();
                function attach_vfd_to_pwr_object();
                function pwr_object_reset_disabled_status();
                enumeration {SWING_PQ=3, SWING=2, PV=1, PQ=0} bustype; // defines whether the node is a PQ, PV, or SWING node
                set {ISSOURCE=2, HASSOURCE=1} busflags; // flag indicates node has a source for voltage, i.e. connects to the swing node
                object reference_bus; // reference bus from which frequency is defined
                double maximum_voltage_error[V]; // convergence voltage limit or convergence criteria
                complex voltage_A[V]; // bus voltage, Phase A to ground
                complex voltage_B[V]; // bus voltage, Phase B to ground
                complex voltage_C[V]; // bus voltage, Phase C to ground
                complex voltage_AB[V]; // line voltages, Phase AB
                complex voltage_BC[V]; // line voltages, Phase BC
                complex voltage_CA[V]; // line voltages, Phase CA
                double mean_repair_time[s]; // Time after a fault clears for the object to be back in service
                enumeration {PLL=3, SIMPLE=2, NONE=1} frequency_measure_type; // PLL frequency measurement
                double sfm_Tf[s]; // Transducer time constant for simplified frequency measurement (seconds)
                double pll_Kp[pu]; // Proportional gain of PLL frequency measurement
                double pll_Ki[pu]; // Integration gain of PLL frequency measurement
                double measured_angle_A[rad]; // bus angle measurement, phase A
                double measured_frequency_A[Hz]; // frequency measurement, phase A
                double measured_angle_B[rad]; // bus angle measurement, phase B
                double measured_frequency_B[Hz]; // frequency measurement, phase B
                double measured_angle_C[rad]; // bus angle measurement, phase C
                double measured_frequency_C[Hz]; // frequency measurement, phase C
                double measured_frequency[Hz]; // frequency measurement - average of present phases
                enumeration {OUT_OF_SERVICE=0, IN_SERVICE=1} service_status; // In and out of service flag
                double service_status_double; // In and out of service flag - type double - will indiscriminately override service_status - useful for schedules
                double previous_uptime[min]; // Previous time between disconnects of node in minutes
                double current_uptime[min]; // Current time since last disconnect of node in minutes
                bool Norton_dynamic; // Flag to indicate a Norton-equivalent connection -- used for generators and deltamode
                bool generator_dynamic; // Flag to indicate a voltage-sourcing or swing-type generator is present -- used for generators and deltamode
                bool GFA_enable; // Disable/Enable Grid Friendly Appliance(TM)-type functionality
                double GFA_freq_low_trip[Hz]; // Low frequency trip point for Grid Friendly Appliance(TM)-type functionality
                double GFA_freq_high_trip[Hz]; // High frequency trip point for Grid Friendly Appliance(TM)-type functionality
                double GFA_volt_low_trip[pu]; // Low voltage trip point for Grid Friendly Appliance(TM)-type functionality
                double GFA_volt_high_trip[pu]; // High voltage trip point for Grid Friendly Appliance(TM)-type functionality
                double GFA_reconnect_time[s]; // Reconnect time for Grid Friendly Appliance(TM)-type functionality
                double GFA_freq_disconnect_time[s]; // Frequency violation disconnect time for Grid Friendly Appliance(TM)-type functionality
                double GFA_volt_disconnect_time[s]; // Voltage violation disconnect time for Grid Friendly Appliance(TM)-type functionality
                bool GFA_status; // Low frequency trip point for Grid Friendly Appliance(TM)-type functionality
                enumeration {OVER_VOLTAGE=4, UNDER_VOLTAGE=3, OVER_FREQUENCY=2, UNDER_FREQUENCY=1, NONE=0} GFA_trip_method; // GFA trip for over-voltage
                object topological_parent; // topological parent as per GLM configuration
        }

        function interupdate_pwr_object();
        function pwr_object_swing_swapper();
        function pwr_current_injection_update_map();
        function attach_vfd_to_pwr_object();
        function pwr_object_reset_disabled_status();
        enumeration {A=4, I=3, C=2, R=1, U=0} load_class; // Flag to track load type, not currently used for anything except sorting
        enumeration {CRITICAL=2, PRIORITY=1, DISCRETIONARY=0} load_priority; // Load classification based on priority
        complex constant_power_A[VA]; // constant power load on phase A, specified as VA
        complex constant_power_B[VA]; // constant power load on phase B, specified as VA
        complex constant_power_C[VA]; // constant power load on phase C, specified as VA
        double constant_power_A_real[W]; // constant power load on phase A, real only, specified as W
        double constant_power_B_real[W]; // constant power load on phase B, real only, specified as W
        double constant_power_C_real[W]; // constant power load on phase C, real only, specified as W
        double constant_power_A_reac[VAr]; // constant power load on phase A, imaginary only, specified as VAr
        double constant_power_B_reac[VAr]; // constant power load on phase B, imaginary only, specified as VAr
        double constant_power_C_reac[VAr]; // constant power load on phase C, imaginary only, specified as VAr
        complex constant_current_A[A]; // constant current load on phase A, specified as Amps
        complex constant_current_B[A]; // constant current load on phase B, specified as Amps
        complex constant_current_C[A]; // constant current load on phase C, specified as Amps
        double constant_current_A_real[A]; // constant current load on phase A, real only, specified as Amps
        double constant_current_B_real[A]; // constant current load on phase B, real only, specified as Amps
        double constant_current_C_real[A]; // constant current load on phase C, real only, specified as Amps
        double constant_current_A_reac[A]; // constant current load on phase A, imaginary only, specified as Amps
        double constant_current_B_reac[A]; // constant current load on phase B, imaginary only, specified as Amps
        double constant_current_C_reac[A]; // constant current load on phase C, imaginary only, specified as Amps
        complex constant_impedance_A[Ohm]; // constant impedance load on phase A, specified as Ohms
        complex constant_impedance_B[Ohm]; // constant impedance load on phase B, specified as Ohms
        complex constant_impedance_C[Ohm]; // constant impedance load on phase C, specified as Ohms
        double constant_impedance_A_real[Ohm]; // constant impedance load on phase A, real only, specified as Ohms
        double constant_impedance_B_real[Ohm]; // constant impedance load on phase B, real only, specified as Ohms
        double constant_impedance_C_real[Ohm]; // constant impedance load on phase C, real only, specified as Ohms
        double constant_impedance_A_reac[Ohm]; // constant impedance load on phase A, imaginary only, specified as Ohms
        double constant_impedance_B_reac[Ohm]; // constant impedance load on phase B, imaginary only, specified as Ohms
        double constant_impedance_C_reac[Ohm]; // constant impedance load on phase C, imaginary only, specified as Ohms
        complex constant_power_AN[VA]; // constant power wye-connected load on phase A, specified as VA
        complex constant_power_BN[VA]; // constant power wye-connected load on phase B, specified as VA
        complex constant_power_CN[VA]; // constant power wye-connected load on phase C, specified as VA
        double constant_power_AN_real[W]; // constant power wye-connected load on phase A, real only, specified as W
        double constant_power_BN_real[W]; // constant power wye-connected load on phase B, real only, specified as W
        double constant_power_CN_real[W]; // constant power wye-connected load on phase C, real only, specified as W
        double constant_power_AN_reac[VAr]; // constant power wye-connected load on phase A, imaginary only, specified as VAr
        double constant_power_BN_reac[VAr]; // constant power wye-connected load on phase B, imaginary only, specified as VAr
        double constant_power_CN_reac[VAr]; // constant power wye-connected load on phase C, imaginary only, specified as VAr
        complex constant_current_AN[A]; // constant current wye-connected load on phase A, specified as Amps
        complex constant_current_BN[A]; // constant current wye-connected load on phase B, specified as Amps
        complex constant_current_CN[A]; // constant current wye-connected load on phase C, specified as Amps
        double constant_current_AN_real[A]; // constant current wye-connected load on phase A, real only, specified as Amps
        double constant_current_BN_real[A]; // constant current wye-connected load on phase B, real only, specified as Amps
        double constant_current_CN_real[A]; // constant current wye-connected load on phase C, real only, specified as Amps
        double constant_current_AN_reac[A]; // constant current wye-connected load on phase A, imaginary only, specified as Amps
        double constant_current_BN_reac[A]; // constant current wye-connected load on phase B, imaginary only, specified as Amps
        double constant_current_CN_reac[A]; // constant current wye-connected load on phase C, imaginary only, specified as Amps
        complex constant_impedance_AN[Ohm]; // constant impedance wye-connected load on phase A, specified as Ohms
        complex constant_impedance_BN[Ohm]; // constant impedance wye-connected load on phase B, specified as Ohms
        complex constant_impedance_CN[Ohm]; // constant impedance wye-connected load on phase C, specified as Ohms
        double constant_impedance_AN_real[Ohm]; // constant impedance wye-connected load on phase A, real only, specified as Ohms
        double constant_impedance_BN_real[Ohm]; // constant impedance wye-connected load on phase B, real only, specified as Ohms
        double constant_impedance_CN_real[Ohm]; // constant impedance wye-connected load on phase C, real only, specified as Ohms
        double constant_impedance_AN_reac[Ohm]; // constant impedance wye-connected load on phase A, imaginary only, specified as Ohms
        double constant_impedance_BN_reac[Ohm]; // constant impedance wye-connected load on phase B, imaginary only, specified as Ohms
        double constant_impedance_CN_reac[Ohm]; // constant impedance wye-connected load on phase C, imaginary only, specified as Ohms
        complex constant_power_AB[VA]; // constant power delta-connected load on phase A, specified as VA
        complex constant_power_BC[VA]; // constant power delta-connected load on phase B, specified as VA
        complex constant_power_CA[VA]; // constant power delta-connected load on phase C, specified as VA
        double constant_power_AB_real[W]; // constant power delta-connected load on phase A, real only, specified as W
        double constant_power_BC_real[W]; // constant power delta-connected load on phase B, real only, specified as W
        double constant_power_CA_real[W]; // constant power delta-connected load on phase C, real only, specified as W
        double constant_power_AB_reac[VAr]; // constant power delta-connected load on phase A, imaginary only, specified as VAr
        double constant_power_BC_reac[VAr]; // constant power delta-connected load on phase B, imaginary only, specified as VAr
        double constant_power_CA_reac[VAr]; // constant power delta-connected load on phase C, imaginary only, specified as VAr
        complex constant_current_AB[A]; // constant current delta-connected load on phase A, specified as Amps
        complex constant_current_BC[A]; // constant current delta-connected load on phase B, specified as Amps
        complex constant_current_CA[A]; // constant current delta-connected load on phase C, specified as Amps
        double constant_current_AB_real[A]; // constant current delta-connected load on phase A, real only, specified as Amps
        double constant_current_BC_real[A]; // constant current delta-connected load on phase B, real only, specified as Amps
        double constant_current_CA_real[A]; // constant current delta-connected load on phase C, real only, specified as Amps
        double constant_current_AB_reac[A]; // constant current delta-connected load on phase A, imaginary only, specified as Amps
        double constant_current_BC_reac[A]; // constant current delta-connected load on phase B, imaginary only, specified as Amps
        double constant_current_CA_reac[A]; // constant current delta-connected load on phase C, imaginary only, specified as Amps
        complex constant_impedance_AB[Ohm]; // constant impedance delta-connected load on phase A, specified as Ohms
        complex constant_impedance_BC[Ohm]; // constant impedance delta-connected load on phase B, specified as Ohms
        complex constant_impedance_CA[Ohm]; // constant impedance delta-connected load on phase C, specified as Ohms
        double constant_impedance_AB_real[Ohm]; // constant impedance delta-connected load on phase A, real only, specified as Ohms
        double constant_impedance_BC_real[Ohm]; // constant impedance delta-connected load on phase B, real only, specified as Ohms
        double constant_impedance_CA_real[Ohm]; // constant impedance delta-connected load on phase C, real only, specified as Ohms
        double constant_impedance_AB_reac[Ohm]; // constant impedance delta-connected load on phase A, imaginary only, specified as Ohms
        double constant_impedance_BC_reac[Ohm]; // constant impedance delta-connected load on phase B, imaginary only, specified as Ohms
        double constant_impedance_CA_reac[Ohm]; // constant impedance delta-connected load on phase C, imaginary only, specified as Ohms
        complex measured_voltage_A; // current measured voltage on phase A
        complex measured_voltage_B; // current measured voltage on phase B
        complex measured_voltage_C; // current measured voltage on phase C
        complex measured_voltage_AB; // current measured voltage on phases AB
        complex measured_voltage_BC; // current measured voltage on phases BC
        complex measured_voltage_CA; // current measured voltage on phases CA
        bool phase_loss_protection; // Trip all three phases of the load if a fault occurs
        double base_power_A[VA]; // in similar format as ZIPload, this represents the nominal power on phase A before applying ZIP fractions
        double base_power_B[VA]; // in similar format as ZIPload, this represents the nominal power on phase B before applying ZIP fractions
        double base_power_C[VA]; // in similar format as ZIPload, this represents the nominal power on phase C before applying ZIP fractions
        double power_pf_A[pu]; // in similar format as ZIPload, this is the power factor of the phase A constant power portion of load
        double current_pf_A[pu]; // in similar format as ZIPload, this is the power factor of the phase A constant current portion of load
        double impedance_pf_A[pu]; // in similar format as ZIPload, this is the power factor of the phase A constant impedance portion of load
        double power_pf_B[pu]; // in similar format as ZIPload, this is the power factor of the phase B constant power portion of load
        double current_pf_B[pu]; // in similar format as ZIPload, this is the power factor of the phase B constant current portion of load
        double impedance_pf_B[pu]; // in similar format as ZIPload, this is the power factor of the phase B constant impedance portion of load
        double power_pf_C[pu]; // in similar format as ZIPload, this is the power factor of the phase C constant power portion of load
        double current_pf_C[pu]; // in similar format as ZIPload, this is the power factor of the phase C constant current portion of load
        double impedance_pf_C[pu]; // in similar format as ZIPload, this is the power factor of the phase C constant impedance portion of load
        double power_fraction_A[pu]; // this is the constant power fraction of base power on phase A
        double current_fraction_A[pu]; // this is the constant current fraction of base power on phase A
        double impedance_fraction_A[pu]; // this is the constant impedance fraction of base power on phase A
        double power_fraction_B[pu]; // this is the constant power fraction of base power on phase B
        double current_fraction_B[pu]; // this is the constant current fraction of base power on phase B
        double impedance_fraction_B[pu]; // this is the constant impedance fraction of base power on phase B
        double power_fraction_C[pu]; // this is the constant power fraction of base power on phase C
        double current_fraction_C[pu]; // this is the constant current fraction of base power on phase C
        double impedance_fraction_C[pu]; // this is the constant impedance fraction of base power on phase C
        enumeration {BACKWARD_EULER=3, TRAPEZOIDAL=2, UNDEFINED=1, NONE=0} inrush_integration_method_capacitance; // Selected integration method to use for capacitive elements of the load
        enumeration {BACKWARD_EULER=3, TRAPEZOIDAL=2, UNDEFINED=1, NONE=0} inrush_integration_method_inductance; // Selected integration method to use for inductive elements of the load
}